###INSTALAR----
install.packages("swirl")#instalar um pacote
library(swirl)
#lendo de uma tabela: Opção 1----
install.packages("read.csv2")
library(read.csv2)
xdat1 <- read.csv2("exemplo.csv", header = T, sep = ";")#muda separado para "tabulação"," ou ";" segundo seu ssistema
View(xdat1)
##MOstrar o objeto----
head(xdat1)
summary(xdat1)
View(xdat1)
#lendo de uma tabela: Opção 4----
library(readxl)
xlsxdat2 <-read_xlsx("ExercicioM2A5.xlsx", sheet=1, col_names = T) #importa diretamente do arquivo excel
View(xlsxdat2)
str(xlsxdat2)
t(xlsxdat2)
trans_xlsx <- t(xlsxdat2)
View(trans_xlsx)
str(trans_xlsx)
View(trans_xlsx)
View(xlsxdat2)
View(xdat1)
# Importar arquivo txt com separador de tabulação
dados <- read.table("AntSpeed.txt", header = TRUE, sep = "\t")
plot(x~y, data = dados)
plot(x~y, data = gb)
plot(seedweight_mg, data = dados)
plot(dados$seedweight_mg)
str(dados)
#boxplot----
boxplot(seedweigth~substrate, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(seedweight~substrate, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(seedweight_mg~substrate, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(substrate~colonyID, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(substrate~antspeed_cm.s, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(antspeed_cm.s~substrate, data=dados, xlab= "Tamanho da semente", ylab="Substrato") #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(antspeed_cm.s~substrate, data=dados) #Boxplot da abundância da especie Aba.par nas 3 áreas.
View(dados)
#boxplot----
boxplot(antspeed_cm.s~substrate, sebset= substrate %in% "sand", data=dados) #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(antspeed_cm.s~substrate, sebset= substrate %in% "sand", data=dados) #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(antspeed_cm.s~substrate, subset= substrate %in% "sand", data=dados) #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(seedweight_mg~substrate, subset= substrate %in% "sand", data=dados) #Boxplot da abundância da especie Aba.par nas 3 áreas.
#boxplot----
boxplot(seedweight_mg~substrate, subset= substrate %in% "sand", data=dados, xlab = "Substrato", ylab = "Peso da semente") #Boxplot da abundância da especie Aba.par nas 3 áreas.
View(dados)
#Filtrar----
c1 <- dados[dados$colonyID %in% 'C1',]# filtra as linhas que tem o valor TRUE na coluna bar
View(c1)
c1$seedweight_mg
peso_c1 <- c1$seedweight_mg
#Filtrar----
B1 <- dados[dados$colonyID %in% 'B1',]# filtra as linhas que tem o valor TRUE na coluna bar
peso_B1 <- c1$seedweight_mg
rm(c1)
rm(peso_c1)
View(B1)
#outra possibilidade de filtrar
B1_peso <- dados[dados$colonyID %in% 'B1',"seedweight_mg"]
plot(B1_peso)
table(dados$colonyID, dados$substrate)
#lendo de uma tabela: Opção 4----
library(readxl)
dados_amostra <-read_xlsx("dados_amostra.xlsx", sheet=1, col_names = T)
View(dados_amostra)
View(dados)
dados_local <-read_xlsx("dados_local.xlsx", sheet=1, col_names = T)
library(dplyr)
tabela_curta <- dados_amostra %>%
group_by(Local) %>%
summarise(MedRiqAmo=mean(RiqAmos),
Med.MO = mean(MO))
View(tabela_curta)
dados_local$RiqAmost <- tabela_curta$MedRiqAmo
dados_local$MOAmost <- tabela_curta$Med.MO
View(tabela_curta)
View(dados_local)
View(dados_amostra)
View(dados_local)
#Grafico de dispersion
par(mfrow=c(1,2))
plot(dados_local$Alti, dados_local$RiquezaTotal, xlab = "Altitude (m)", ylab = "Riqueza total no local")
plot(dados_local$Temp, dados_local$RiquezaTotal, xlab = "Temperatura (C)", ylab = "Riqueza total no local")
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total")
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza amostral média")
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total", xlab = "Riqueza total", ylab = "Estado")
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza amostral média", xlab = "Riqueza total", ylab = "Proteção")
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total", xlab = "Estado", ylab = "Riqueza total")
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza amostral média", xlab = "Proteção", ylab = "Riqueza amostral média")
View(dados_local)
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza total", xlab = "Proteção", ylab = "Riqueza amostral média")
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total", xlab = "Estado", ylab = "Riqueza total")
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total", xlab = "Estado", ylab = "Riqueza total")
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza amostral média", xlab = "Proteção", ylab = "Riqueza total")
localPrim <- dados_local[dados_local$Estado %in%
'Primaria',]
localSec <- dados_local[dados_local$Estado %in%
'Secundaria']
localSec <- dados_local[dados_local$Estado %in%
'Secundaria',]
var.test(RiquezaTotal~Estado, data = dados_local)
bartlett.test(RiquezaToral~Estado, data = dados_local)
bartlett.test(RiquezaTotal~Estado, data = dados_local)
library(ggplot2)
ggplot(data = localPrim, aes(x=RiquezaTotal))+
geom_histogram(aes(y=after_stat(density)),
binwidth = 1)+
geom_density(lwd=1.2,
linetype=2,
colour=2)
shapiro.test(redid(lm(RiquezaTotal~Estado, dados_local)))
shapiro.test(resid(lm(RiquezaTotal~Estado, dados_local)))
shapiro.test(resid(lm(RiquezaTotal~Protecao, dados_local)))
library(ggplot2)
library(deĺyr)
library(depĺyr)
library(dplyr)
#boxplot
boxplot(dados_local$RiquezaTotal ~ dados_local$Estado, main="Riqueza total", xlab = "Estado", ylab = "Riqueza total")
boxplot(dados_local$RiquezaTotal ~ dados_local$Protecao, main="Riqueza amostral média", xlab = "Proteção", ylab = "Riqueza total")
ggplot(data = localPrim, aes(x=RiquezaTotal))+
geom_histogram(aes(y=after_stat(density)),
binwidth = 1)+
geom_density(lwd=1.2,
linetype=2,
colour=2)
var.test(RiquezaTotal~Estado, data = dados_local)
bartlett.test(RiquezaTotal~Estado, data = dados_local)
#scarterplot----
plot(RiqAmos~Temp, data=xdat4, subset= Estado  %in%"Primaria")# dispersão  da abundância da especie Aba.par em relação á variavel max.Ht
#scarterplot----
plot(RiqAmos~Temp, data=dados, subset= Estado  %in%"Primaria")# dispersão  da abundância da especie Aba.par em relação á variavel max.Ht
View(dados_local)
#scarterplot----
plot(RiqAmos~Temp, data=dados_local, subset= Estado  %in%"Primaria")# dispersão  da abundância da especie Aba.par em relação á variavel max.Ht
View(dados_local)
View(dados_local)
#scarterplot----
plot(RiqAmost~Temp, data=dados_local, subset= Estado  %in%"Primaria")# dispersão  da abundância da especie Aba.par em relação á variavel max.Ht
points(RiqAmost~Temp, data=xdat4, subset= Estado %in% "Secundaria", col= "#624000", pch= "ç") #adicionar outra espcie ao gráfico
points(RiqAmost~Temp, data=dados_local, subset= Estado %in% "Secundaria", col= "#624000", pch= "ç") #adicionar outra espcie ao gráfico
shapiro.test(resid(lm(RiquezaTotal~Estado, dados_local)))
shapiro.test(resid(lm(RiquezaTotal~Protecao, dados_local)))
resid(lm(RiquezaTotal~Estado, dados_local))
#Avaliação visual dos resíduos
Riq.estado <- lm(RiquezaTotal~Estado, dados_local)
names(Riq.estado)
qqnorm(Riq.estado$residuals)
qqline(Riq.estado$residuals)
#grafico
boxplot(RiquezaTotal~Estado, xlab = "Estado sucessional",
ylab = "Riqueza total", col="lightblue", data = dados_local)
boxplot(RiquezaTotal~Estado, notch =T, xlab = "Estado sucessional",
ylab = "Riqueza total", col="lightblue", data = dados_local)
boxplot(RiquezaTotal~Protecao, notch =T, xlab = "Estado sucessional",
ylab = "Riqueza total", col="lightblue", data = dados_local)
boxplot(RiquezaTotal~Estado, notch =T, xlab = "Estado sucessional",
ylab = "Riqueza total", col="purple", data = dados_local)
t.test(RiquezaTotal~Estado, data = dados_local)
t.test(RiquezaTotal~Protecao, data = dados_local)
wilcox.test(Temp~Estado, dados_local)
plot(RiquezaTotal~Temp, data = dados_local,
xlab="Temperatura Cº", ylab = "Riqueza total no local")
#Construção inicial do modelo
lm(RiquezaTotal~Temp, data = dados_local)
plot(RiquezaTotal~Temp, data = dados_local,
xlab="Temperatura Cº", ylab = "Riqueza total no local",
xlim = c(0, 50),  # Limites do eixo X
ylim = c(0, 30))
plot(RiquezaTotal~Temp, data = dados_local,
xlab="Temperatura Cº", ylab = "Riqueza total no local",
xlim = c(0, 50),  # Limites do eixo X
ylim = c(0, 15))
#Construção inicial do modelo
Temp.lm.tot <- lm(RiquezaTotal~Temp, data = dados_local)
plot(RiquezaTotal~Temp, data = dados_local,
xlab="Temperatura Cº", ylab = "Riqueza total no local",
xlim = c(0, 45),  # Limites do eixo X
ylim = c(0, 15))
#Verificar as premissas do teste
par(mfrow = c(2,2), oma = c(0,0,2,0))
plot(Temp.lm.tot)
dev.off()
#Verificar as premissas do teste
par(mfrow = c(2,2), oma = c(0,0,2,0))
plot(Temp.lm.tot)
#Para testar homogeneidade
install.packages("performance")
#Para testar homogeneidade
library(performance)
hetero.temp.tot <- check_heteroscedasticity(Temp.lm.tot)
hetero.temp.tot
plot(hetero.temp.tot)
plot(hetero.temp.tot)
#Para testar a premissa de normalidade
ResidualModel.tot <- residuals(Temp.lm.tot)
hist(ResidualModel.tot)
dev.off()# Volta a conf. padrão dos gráficos
hist(ResidualModel.tot)
#teste de normalidade
shapiro.test(ResidualModel.tot)
qqnorm(ResidualModel.tot)
qqline(ResidualModel.tot)
#teste com o pacote car
install.packages("car")
#teste com o pacote car
library(car)
qqplot(Temp.lm.tot)
qqplot(Temp.lm.tot)
qqplot(Temp.lm.tot)
qqPlot(Temp.lm.tot)
#Normalidade com o pacote performance
library(performance)
check_normality(Temp.lm.tot)
normality.tem.tot <- check_normality(Temp.lm.tot)
plot(normality.tem.tot)
install.packages("qqplotr")
library(qqplotr)
library(qqplotr)
install.packages("qqplotr")
library(qqplotr)
install.packages("qqconf")
install.packages("qqplotr")
library(qqplotr)
plot(normality.tem.tot)
install.packages("qqplotr")
library(qqplotr)
plot(normality.tem.tot)
#Verificação completa com o pacote performance
check_model(Temp.lm.tot)
check_outliers(Temp.lm.tot)
outliers.temp.tot <- check_outliers(Temp.lm.tot)
plot(outliers.temp.tot)
#graficar os residuos do modelo
plot(RiquezaTotal~Temp, data = dados_local,
xlab="Temperatura Cº", ylab = "Riqueza total no local",
xlim = c(0, 50),  # Limites do eixo X
ylim = c(0, 13))
abline(Temp.lm.tot, col="purple")
#linha de tendencia
fitted.temp.tot <- predict(Temp.lm.tot)
fitted.temp.tot
View(dados_amostra)
for (i in 1:26) {
lines(c(dados_local$Temp[i], dados_local$Temp[i]), c(dados_local$RiquezaTotal[i],
fitted.temp.tot[i]
), col="red")
}
#Ver os resutados consolidados do modelo
summary(Temp.lm.tot)
summary.aov(Temp.lm.tot)
#Com outro pacote
library(car)
Anova(Temp.lm.tot)
#Gráficos diagnósticos
plot(Temp.lm.tot)
library(ggplot2)
install.packages("sjPlot")
library(sjPlot)
plot_model(Temp.lm.tot, type = "pred", show.data = T)
source("~/Documentos/Análise de dados biológicos/aulas.R", echo=TRUE)
plot(RiquezaTotal~Precipit, data = dados_local, xlab="Precipitação mm",
ylab = "Riqueza total no local")
plot(RiquezaTotal~Alti, data = dados_local, xlab="Altitude m",
ylab = "Riqueza total no local")
pairs(dados_local[c(7,2,3,4,10)], panel = panel.smooth)
#Modelo
Reg.mult.full <- lm(RiquezaTotal~Temp+Alti+Precipit+MOAmost, data = dados_local)
Reg.mult.full
check_heteroscedasticity(Reg.mult.full)
plot(check_heteroscedasticity(Reg.mult.full))
plot(check_normality(Reg.mult.full)
)
check_normality(Reg.mult.full)
check_outliers(Reg.mult.full)
plot(check_outliers(Reg.mult.full))
check_model(Reg.mult.full)
#Checar a multicolinearidade
check_collinearity(Reg.mult.full)
plot(check_collinearity(Reg.mult.full))
#Modelo sem a variável temperatura
Reg.mult.v2 <- lm(RiquezaTotal~Alti+Precipit+MOAmost, data = dados_local)
check_model(Reg.mult.v2)
#Testando as premissas
library(performance)
library(ggplot2)
library(sjPlot)
devtools::install_github("strengejacke/strengejacke")
library(sjPlot)
#Com outro pacote
library(car)
#Checar outliers
library(performance)
#Modelo nulo
Reg.mult.nulo <- lm(RiquezaTotal~1, data = dados_local)
check_model(Reg.mult.nulo)
#Modelo força bruta
install.packages("MuMIn")
library(MuMIn)
options(na.action = "na.fail")
Model.selec.bruto <- dredge(Reg.mult.v2)
Model.selec.bruto
Reg.mult.v3 <- lm(RiquezaTotal~Alti+Precipit, data = dados_local)
summary(Reg.mult.v2)
install.packages("lmtest")
##Likelihood-ratio test (LRT)
library(lmtest)
lrtest(Reg.mult.v2, Reg.mult.v3)
##verificar sobre o modelo completo para entender a relação das variáveis
anova(Reg.mult.v2)
library(car)
##para entender qual o papel dessas variáveis no modelo completo de maneira mais prática
Anova(Reg.mult.v2)
Reg.mult.v4 <- lm(RiquezaTotal~Alti, data= dados_local)
lrtest(Reg.mult.v3, Reg.mult.v4)
#2.10. Apresentando resultados
library(ggplot2)
library(sjPlot)
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_minimal()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_blank()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_bw()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_538()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_blank()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_sjplot()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_transparent()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_transparent()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_linedraw()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_update()
plot_model(Reg.mult.v3, type = "eff", terms = c("Alti", "Precipit") , se=T, show.values=T, digits=3, show.data = T )+
theme_dark()
#2.15. Consolidabdo resultados:
#Resultado do modelo escolhido
summary(Reg.mult.v3)#resumo
confint(Reg.mult.v3)#Intervalos de confiança
install.packages("arm")
library(arm)
fig10_3 <- coefplot(Reg.mult.v3)# Gráfico de coeficientes
install.packages("MASS", "stargazer")
